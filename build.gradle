group 'org.nrg'
version '1.0-alpha.2-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def vXnat = '1.7.1'
def vSpring = '4.2.7.RELEASE'
def vSwagger = '2.4.0'
def vHibernate = '4.3.11.Final'
def vJackson = '2.6.5'
def vSlf4j = '1.7.21'
def vJunit = '4.12'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release'
        name 'XNAT External Release Repository'
    }
}

// Use this configuration to put dependencies into the fat jar
configurations {
    compile.extendsFrom(compileAndInclude)
}

dependencies {
    compileAndInclude (group: "org.nrg", name: "transporter", version: "1.0-SNAPSHOT") {
        transitive = false
    }
    compileAndInclude "io.rest-assured:rest-assured:3.0.1"
    compileAndInclude (group: 'com.spotify', name: 'docker-client', version: '6.1.2-SNAPSHOT') {
        exclude group: "ch.qos.logback"
    }
    compileAndInclude "com.jayway.jsonpath:json-path:2.2.0"

    compile ("org.nrg.xnat:web:${vXnat}") {
        transitive = false
    }
    compile ("org.nrg.xdat:core:${vXnat}") {
        transitive = false
    }
    compile "org.nrg.xnat:xnat-data-models:${vXnat}"
    compile "org.nrg:prefs:${vXnat}"
    compile "org.nrg:config:${vXnat}"
    compile "org.nrg:automation:${vXnat}"
    compile "org.nrg:framework:${vXnat}"

    compile "org.springframework:spring-beans:${vSpring}"
    compile "org.springframework:spring-context:${vSpring}"
    compile "org.springframework:spring-core:${vSpring}"
    compile "org.springframework:spring-tx:${vSpring}"
    compile "org.springframework:spring-web:${vSpring}"
    compile "org.springframework:spring-webmvc:${vSpring}"

    compile "io.springfox:springfox-swagger2:${vSwagger}"
    compile "io.springfox:springfox-swagger-ui:${vSwagger}"

    compile "org.hibernate:hibernate-core:${vHibernate}"

    compile "com.fasterxml.jackson.core:jackson-annotations:${vJackson}"
    compile "com.fasterxml.jackson.core:jackson-core:${vJackson}"
    compile "com.fasterxml.jackson.core:jackson-databind:${vJackson}"

    compile "org.slf4j:slf4j-api:${vSlf4j}"
    compile "org.slf4j:slf4j-log4j12:${vSlf4j}"

    compile "commons-lang:commons-lang:2.6"

    compile "javax.inject:javax.inject:1"
    compile "javax.servlet:javax.servlet-api:3.1.0"

//    compile "com.google.guava:guava:19.0"

    testCompile group: 'junit', name: 'junit', version: "${vJunit}"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "org.springframework:spring-test:${vSpring}"
    testCompile "org.springframework.security:spring-security-test:4.0.4.RELEASE"
    testCompile "org.springframework.security:spring-security-config:4.0.4.RELEASE"
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "javax.servlet:javax.servlet-api:3.1.0"
    testCompile "com.h2database:h2:1.4.191"
    testCompile "org.springframework:spring-jdbc:${vSpring}"
    testCompile "org.springframework:spring-orm:${vSpring}"
    testCompile "com.google.code.gson:gson:2.6.2"
    testCompile "org.json:json:20160810"
    testCompile "org.apache.commons:commons-dbcp2:2.1.1"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task unitTest( type: Test ) {
    exclude '**/DockerControlApiTest.class', '**/*IntegrationTest.class'
}

task fatJar(type: Jar) {
    zip64 true
    baseName = project.name + '-all'
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            artifact fatJar {
                classifier "all"
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'XNAT Container Service')
                root.appendNode('description', 'XNAT plugin for launching and managing containers.')
                root.appendNode('url', 'https://github.com/nrgxnat/container-service')
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/nrgxnat/container-service')
                scm.appendNode('connection', 'scm:https://github.com/nrgxnat/container-service.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:nrgxnat/container-service')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Simplified BSD 2-Clause License')
                license.appendNode('url', 'http://xnat.org/about/license.php')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def flavin = developers.appendNode('developer')
                flavin.appendNode('id', 'jflavin')
                flavin.appendNode('name', 'John Flavin')
                flavin.appendNode('email', 'jflavin@wustl.edu')

                def kelsey = developers.appendNode('developer')
                kelsey.appendNode('id', 'kelseym')
                kelsey.appendNode('name', 'Matt Kelsey')
                kelsey.appendNode('email', 'kelseym@wustl.edu')
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault('repoUsername', 'username')
                password propertyWithDefault('repoPassword', 'password')
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(def String property, def Object value) {
    hasProperty(property) ? getProperty(property) : value
}
